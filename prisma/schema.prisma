datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:password@localhost:5432/xpertbuild"
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id            String    @id @default(uuid())
  name          String
  contractValue Float
  contractType  ContractType
  generalContractor String?
  startDate     DateTime
  status        ProjectStatus
  address       String
  client        Client   @relation(fields: [clientId], references: [id])
  clientId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  scopes      Scope[]
  workItems     ProjectWorkItem[]
  expenses      Expense[]
  timeEntries TimeEntry[]
}

model Client {
  id            String    @id @default(uuid())
  name          String    @unique
  code          String    @unique   
  description   String?
  address       String?
  contactName   String?
  contactEmail  String?
  contactPhone  String? 
  active        Boolean   @default(true)
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Scope {
  id            String    @id @default(uuid())
  name          String
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     String
  subScopes     SubScope[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SubScope {
  id          String        @id @default(uuid())
  name        String
  scope       Scope         @relation(fields: [scopeId], references: [id])
  scopeId     String
  quantities  WorkItemQuantity[]
  isCompleted Boolean       @default(false)
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WorkItem {
  id          String        @id @default(uuid())
  code        String        // Remove @unique constraint
  description String
  unit        String
  unitPrice   Float
  isTemplate  Boolean       @default(false)
  projects    ProjectWorkItem[]
  quantities  WorkItemQuantity[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProjectWorkItem {
  id          String    @id @default(uuid())
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  workItem    WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId  String
  unitPrice   Float     // Project-specific override of work item's base price
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkItemQuantity {
  id          String    @id @default(uuid())
  subScope    SubScope  @relation(fields: [subScopeId], references: [id])
  subScopeId  String
  workItem    WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId  String
  quantity    Float
  completed   Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Employee {
  id              Int              @id @default(autoincrement())
  firstName       String
  lastName        String
  employeeType    EmployeeType     // LOCAL or UNION
  // Local employee fields
  hourlyRate      Float?           // Only for LOCAL employees
  isFieldWorker   Boolean?         // Only for LOCAL employees
  // Union employee fields
  ssn             String?          @unique // Required for UNION employees
  dob             DateTime?        // Required for UNION employees
  address         String?          // Required for UNION employees
  city            String?          // Required for UNION employees
  state           String?          // Required for UNION employees
  zip             String?          // Required for UNION employees
  unionClass      UnionClass?      @relation(fields: [unionClassId], references: [id])
  unionClassId    Int?
  timeEntries     TimeEntry[]
  payments        Payment[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([employeeType])
  @@index([ssn])
}

model UnionClass {
  id            Int              @id @default(autoincrement())
  name          String
  employees     Employee[]
  baseRates     UnionClassBaseRate[]
  customRates   UnionClassCustomRate[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model UnionClassBaseRate {
  id            Int          @id @default(autoincrement())
  unionClass    UnionClass   @relation(fields: [unionClassId], references: [id])
  unionClassId  Int
  regularRate   Float
  overtimeRate  Float
  benefitsRate  Float
  effectiveDate DateTime
  endDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([unionClassId, effectiveDate])
}

model UnionClassCustomRate {
  id            Int          @id @default(autoincrement())
  name          String       
  description   String?
  rate          Float
  unionClass    UnionClass   @relation(fields: [unionClassId], references: [id])
  unionClassId  Int
  effectiveDate DateTime
  endDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([unionClassId, effectiveDate])
}

model TimeEntry {
  id            Int           @id @default(autoincrement())
  employee      Employee      @relation(fields: [employeeId], references: [id])
  employeeId    Int
  project       Project?      @relation(fields: [projectId], references: [id])
  projectId     String?
  date          DateTime
  regularHours  Float         @default(0)
  overtimeHours Float         @default(0)
  type          TimeType
  weekNumber    Int
  yearNumber    Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentStatus PaymentStatus @default(PENDING)
  payment       Payment?      @relation(fields: [paymentId], references: [id])
  source        TimeEntrySource @default(APP)
  paymentId     Int?

  @@index([employeeId, date])
  @@index([projectId, date])
  @@index([weekNumber, yearNumber])
}

model Payment {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  amount      Float
  date        DateTime
  weekNumber  Int
  yearNumber  Int
  status      PaymentStatus
  notes       String?
  timeEntries TimeEntry[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employeeId, weekNumber, yearNumber])
}

model SyncLog {
  id            Int       @id @default(autoincrement())
  startTime     DateTime
  endTime       DateTime?
  status        SyncStatus
  rowsRead      Int       @default(0)
  rowsSuccess   Int       @default(0) 
  rowsError     Int       @default(0)
  errors        Json?     // Array of {row: number, message: string}
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Expense {
  id          String        @id @default(uuid())
  amount      Float
  date        DateTime
  description String
  category    ExpenseCategory
  type        ExpenseType
  vendor      String?
  project     Project?      @relation(fields: [projectId], references: [id])
  projectId   String?
  recurring   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String    // Hashed
  role          Role      @default(USER)
  firstName     String
  lastName      String
  active        Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Material {
  id            String   @id @default(uuid())
  name          String
  description   String?
  unit          String
  category      String   // Material or Tool
  type          String   // Subcategory like "Paintbrush", "Cement", etc.
  priceHistory  VendorPrice[]
}

model Vendor {
  id            String   @id @default(uuid())
  name          String
  contactInfo   String?
  address       String?
  priceHistory  VendorPrice[]
}

model VendorPrice {
  id          String   @id @default(uuid())
  materialId  String
  vendorId    String
  price       Float
  date        DateTime @default(now())
  material    Material @relation(fields: [materialId], references: [id])
  vendor      Vendor   @relation(fields: [vendorId], references: [id])

  @@index([materialId, date])
  @@index([vendorId, date])
}

model Settings {
  id              Int       @id @default(1)  // Single row
  companyName     String
  businessHours   Json      // Store opening/closing times for each day
  defaultCurrency String    @default("USD")
  fiscalYearStart DateTime
  fiscalYearEnd   DateTime
  defaultContractType ContractType @default(DIRECT)
  defaultProjectStatus ProjectStatus @default(PLANNING)
  payrollBurden   Float     @default(0.2)  // 20% default
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("settings")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ContractType {
  DIRECT
  SUBCONTRACT
}

enum EmployeeType {
  LOCAL
  UNION
}

enum TimeType {
  REGULAR
  OVERTIME
}

enum ExpenseType {
  GENERAL
  PROJECT
}

enum ExpenseCategory {
  MATERIAL
  TOOLS
  RENTALS
  OPERATIONAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  CANCELLED
}

enum TimeEntrySource {
  APP
  SHEET
}

enum SyncStatus {
  IN_PROGRESS
  SUCCESS  
  ERROR
}
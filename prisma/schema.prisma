datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:password@localhost:5432/xpertbuild"
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id            String    @id @default(uuid())
  name          String
  contractValue Float
  client        String
  contractType  ContractType
  generalContractor String?
  startDate     DateTime
  status        ProjectStatus
  address       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  buildings     Building[]
  workItems     ProjectWorkItem[]
  expenses      Expense[]
  timeEntries TimeEntry[]
}

model Building {
  id        String      @id @default(uuid())
  name      String
  project   Project     @relation(fields: [projectId], references: [id])
  projectId String
  elevations Elevation[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Elevation {
  id          String        @id @default(uuid())
  name        String
  building    Building      @relation(fields: [buildingId], references: [id])
  buildingId  String
  quantities  WorkItemQuantity[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WorkItem {
  id          String        @id @default(uuid())
  code        String        @unique
  description String
  unit        String
  unitPrice   Float
  isTemplate  Boolean       @default(false)
  projects    ProjectWorkItem[]
  quantities  WorkItemQuantity[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProjectWorkItem {
  id          String    @id @default(uuid())
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  workItem    WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId  String
  unitPrice   Float     // Project-specific override of work item's base price
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkItemQuantity {
  id          String    @id @default(uuid())
  elevation   Elevation @relation(fields: [elevationId], references: [id])
  elevationId String
  workItem    WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId  String
  quantity    Float
  completed   Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Employee {
  id              Int              @id @default(autoincrement())
  firstName       String
  lastName        String
  employeeType    EmployeeType     // LOCAL or UNION
  // Local employee fields
  hourlyRate      Float?           // Only for LOCAL employees
  isFieldWorker   Boolean?         // Only for LOCAL employees
  // Union employee fields
  ssn             String?          @unique // Required for UNION employees
  dob             DateTime?        // Required for UNION employees
  address         String?          // Required for UNION employees
  city            String?          // Required for UNION employees
  state           String?          // Required for UNION employees
  zip             String?          // Required for UNION employees
  unionClass      UnionClass?      @relation(fields: [unionClassId], references: [id])
  unionClassId    Int?
  timeEntries     TimeEntry[]
  payments        Payment[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([employeeType])
  @@index([ssn])
}

model UnionClass {
  id            Int              @id @default(autoincrement())
  name          String
  employees     Employee[]
  rates         UnionClassRate[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model UnionClassRate {
  id            Int          @id @default(autoincrement())
  unionClass    UnionClass   @relation(fields: [unionClassId], references: [id])
  unionClassId  Int
  regularRate   Float
  overtimeRate  Float
  benefitsRate  Float
  effectiveDate DateTime
  endDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([unionClassId, effectiveDate])
}

model TimeEntry {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?
  date        DateTime
  regularHours Float    @default(0)
  overtimeHours Float   @default(0)
  type        TimeType
  weekNumber  Int      // Calculated field for easy weekly grouping
  yearNumber  Int      // Calculated field for easy yearly grouping
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paymentStatus PaymentStatus @default(PENDING)

  @@index([employeeId, date])
  @@index([projectId, date])
  @@index([weekNumber, yearNumber])
}

model Payment {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  amount      Float
  date        DateTime
  weekNumber  Int
  yearNumber  Int
  status      PaymentStatus
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employeeId, weekNumber, yearNumber])
}

model Expense {
  id          String        @id @default(uuid())
  amount      Float
  date        DateTime
  description String
  category    ExpenseCategory
  type        ExpenseType
  vendor      String?
  project     Project?      @relation(fields: [projectId], references: [id])
  projectId   String?
  recurring   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ContractType {
  DIRECT
  SUBCONTRACT
}

enum EmployeeType {
  LOCAL
  UNION
}

enum TimeType {
  REGULAR
  OVERTIME
}

enum ExpenseType {
  GENERAL
  PROJECT
}

enum ExpenseCategory {
  MATERIAL
  TOOLS
  RENTALS
  OPERATIONAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  CANCELLED
}